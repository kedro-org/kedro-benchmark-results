{
    "benchmark_datacatalog.TimeDataCatalog.time_add_all": {
        "code": "class TimeDataCatalog:\n    def time_add_all(self):\n        \"\"\"Benchmark the time to add all datasets\"\"\"\n        # Have to initialise a new DataCatalog to avoid failing with DatasetAlreadyExistsError\n        catalog = DataCatalog.from_config(base_catalog)\n        catalog.add_all(self.datasets)\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_add_all",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "94b4e53a8d5ab0874019b447aeaa4cbbddc27fa96348e6cb73b1b79dd48607fe",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_exists": {
        "code": "class TimeDataCatalog:\n    def time_exists(self):\n        \"\"\"Benchmark the time to check if datasets exist\"\"\"\n        for i in range(1,1001):\n            self.catalog.exists(f\"dataset_{i}\")\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_exists",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "9bbce85f01a2cfbb5569bc2ba076dd22b662d5d17db4901cd5269d14dbce3ea6",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_feed_dict": {
        "code": "class TimeDataCatalog:\n    def time_feed_dict(self):\n        \"\"\"Benchmark the time to add feed dict\"\"\"\n        # Have to initialise a new DataCatalog to avoid failing with DatasetAlreadyExistsError\n        catalog = DataCatalog.from_config(base_catalog)\n        catalog.add_feed_dict(self.feed_dict)\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_feed_dict",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "70ac3b6d31f045579c36f8a3422d155a5c3abf1c049e1dd393001f935351301b",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_init": {
        "code": "class TimeDataCatalog:\n    def time_init(self):\n        \"\"\"Benchmark the time to initialize the catalog\"\"\"\n        DataCatalog.from_config(base_catalog)\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_init",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e24ff19b98650bfe32770fcc19d3df7df686fb81a6dc0865700d0e54d7c16200",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_list": {
        "code": "class TimeDataCatalog:\n    def time_list(self):\n        \"\"\"Benchmark the time to list all datasets\"\"\"\n        self.catalog.list()\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_list",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "4a7ae456f2349941bdbc595b3919284633da1da166cf1394660a0399ec618687",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_load": {
        "code": "class TimeDataCatalog:\n    def time_load(self):\n        \"\"\"Benchmark the time to load datasets\"\"\"\n        for i in range(1,1001):\n            self.catalog.load(f\"dataset_load_{i}\")\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_load",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "96bd6914ea6ed937ae958177afd17861ccf3ab1481a5d4d2ed8002dbc5d1131e",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_release": {
        "code": "class TimeDataCatalog:\n    def time_release(self):\n        \"\"\"Benchmark the time to release datasets\"\"\"\n        for i in range(1,1001):\n            self.catalog.release(f\"dataset_{i}\")\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_release",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "fa49ed3249b0319f92a7d6309f2a58ed8595c86141b16768cd575326a2d28d77",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_resolve_factory": {
        "code": "class TimeDataCatalog:\n    def time_resolve_factory(self):\n        \"\"\"Benchmark the time to resolve factory\"\"\"\n        for i in range(1,1001):\n            self.catalog._get_dataset(f\"dataset_factory_{i}\")\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_resolve_factory",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "c051d31d513ef455328bb051eafacb1cc06d9f84dd613ee2e0bee3440bbab467",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_save": {
        "code": "class TimeDataCatalog:\n    def time_save(self):\n        \"\"\"Benchmark the time to save datasets\"\"\"\n        for i in range(1,1001):\n            self.catalog.save(f\"dataset_{i}\", self.dataframe)\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_save",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "4ea897eb28bd91fc7cf8da6e2679bf608b909c8db9ebdffd97f3bf19b275a809",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_shallow_copy": {
        "code": "class TimeDataCatalog:\n    def time_shallow_copy(self):\n        \"\"\"Benchmark the time to shallow copy the catalog\"\"\"\n        self.catalog.shallow_copy()\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_shallow_copy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "64ead39024c492d18b91a21c23a9d3f1323533cd37bd53934d54701ecb259762",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_add_runtime_patterns": {
        "code": "class TimeKedroDataCatalog:\n    def time_add_runtime_patterns(self):\n        \"\"\"Benchmark the time to add runtime patterns\"\"\"\n        for i in range(1,1001):\n            self.catalog.config_resolver.add_runtime_patterns(runtime_patterns)\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_add_runtime_patterns",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "b786ec024eab9b713150ef03157bc8c22258cbe8ba40451cb214bccc662b59ea",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_contains": {
        "code": "class TimeKedroDataCatalog:\n    def time_contains(self):\n        \"\"\"Benchmark the time to check if a dataset exists\"\"\"\n        for i in range(1,1001):\n            f\"dataset_{i}\" in self.catalog\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_contains",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "972d0997207116873eaafb909b14dee963866e1ec78ed6e1d83196dec5f5a232",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_exists": {
        "code": "class TimeKedroDataCatalog:\n    def time_exists(self):\n        \"\"\"Benchmark the time to check if datasets exist\"\"\"\n        for i in range(1,1001):\n            self.catalog.exists(f\"dataset_{i}\")\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_exists",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "99b0e59443a98e72b91709bc25d10c33692ecf4b67fa12a86bd5338b32dd5c17",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_get": {
        "code": "class TimeKedroDataCatalog:\n    def time_get(self):\n        \"\"\"Benchmark the time to get a dataset\"\"\"\n        for i in range(1,1001):\n            self.catalog.get(f\"dataset_{i}\")\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_get",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "7d29410d73483cd23f38858c696de235e58e83180677218247f46dc6498f0523",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_getitem": {
        "code": "class TimeKedroDataCatalog:\n    def time_getitem(self):\n        \"\"\"Benchmark the time to get a dataset\"\"\"\n        for i in range(1,1001):\n            self.catalog[f\"dataset_{i}\"]\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_getitem",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "c49f4a6d891db7e6ce08d63f0f9fb18f23ba93e8d0dc0e084c147dfaec1a4f14",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_init": {
        "code": "class TimeKedroDataCatalog:\n    def time_init(self):\n        \"\"\"Benchmark the time to initialize the catalog\"\"\"\n        KedroDataCatalog.from_config(base_catalog)\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_init",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2605036d4990de11a687fc34dc7e73e929380848cfadc26363b8ed863d0d40de",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_items": {
        "code": "class TimeKedroDataCatalog:\n    def time_items(self):\n        \"\"\"Benchmark the time to get the items of the catalog\"\"\"\n        self.catalog.items()\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_items",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "1d45742334bec1fa8bbd964f24e000a9223ad060e610955504a28166f073f8d9",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_iter": {
        "code": "class TimeKedroDataCatalog:\n    def time_iter(self):\n        \"\"\"Benchmark the time to iterate over the catalog\"\"\"\n        for dataset in self.catalog:\n            pass\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_iter",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "be085256634dd80e2f6ba7e2772ec52327eeb8102d3d1d951e59b8355db6c9ba",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_keys": {
        "code": "class TimeKedroDataCatalog:\n    def time_keys(self):\n        \"\"\"Benchmark the time to get the keys of the catalog\"\"\"\n        self.catalog.keys()\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_keys",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "df88e1d55d639cdc29dcdd7c3a493f2a638360e991120dde15d8d1abe0855615",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_list": {
        "code": "class TimeKedroDataCatalog:\n    def time_list(self):\n        \"\"\"Benchmark the time to list all datasets\"\"\"\n        self.catalog.list()\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_list",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "a05ca51d28dac05a4fd3c8742d494b1a2410933e2fe9f442fcc8a878ec7dbcfd",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_load": {
        "code": "class TimeKedroDataCatalog:\n    def time_load(self):\n        \"\"\"Benchmark the time to load datasets\"\"\"\n        for i in range(1,1001):\n            self.catalog.load(f\"dataset_load_{i}\")\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_load",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "305dcd40b0169338483340f0710dcf91e261ee9a1341b587c3c8da1e8218746d",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_release": {
        "code": "class TimeKedroDataCatalog:\n    def time_release(self):\n        \"\"\"Benchmark the time to release datasets\"\"\"\n        for i in range(1,1001):\n            self.catalog.release(f\"dataset_{i}\")\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_release",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "749e0d9e3e054bc3d96fa78e214937321de2776a678c4471f11229f3eab11685",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_resolve_factory": {
        "code": "class TimeKedroDataCatalog:\n    def time_resolve_factory(self):\n        \"\"\"Benchmark the time to resolve factory\"\"\"\n        for i in range(1,1001):\n            self.catalog.get(f\"dataset_factory_{i}\")\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_resolve_factory",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "df0c47e4b2efc0901a6b709fd228bcdf990c5374fd42946cf7a5e9fc5cca0a23",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_save": {
        "code": "class TimeKedroDataCatalog:\n    def time_save(self):\n        \"\"\"Benchmark the time to save datasets\"\"\"\n        for i in range(1,1001):\n            self.catalog.save(f\"dataset_{i}\", self.dataframe)\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_save",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "694eaec75707eb86e0241e40b7e3c9cc379dd9a3deff164cd2ed73ced43ec9ee",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_setitem": {
        "code": "class TimeKedroDataCatalog:\n    def time_setitem(self):\n        \"\"\"Benchmark the time to set a dataset\"\"\"\n        for i in range(1,1001):\n            self.catalog[f\"dataset_new_{i}\"] = CSVDataset(filepath=\"data.csv\")\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_setitem",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "dd7850da8ab55e5e6e8c4bc1af9ebdacc2f7c7b49ebb15908e4ea4b948b5ffad",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_setitem_raw": {
        "code": "class TimeKedroDataCatalog:\n    def time_setitem_raw(self):\n        \"\"\"Benchmark the time to add a memory dataset\"\"\"\n        for i in range(1,1001):\n            self.catalog[f\"param_{i}\"] = self.feed_dict[f\"param_{i}\"]\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_setitem_raw",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "9ce4b23fb2a1a131403e952ad8dbb4cb3ef0ab69723c9ee29e0062bc4d8e0c53",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_shallow_copy": {
        "code": "class TimeKedroDataCatalog:\n    def time_shallow_copy(self):\n        \"\"\"Benchmark the time to shallow copy the catalog\"\"\"\n        # Will be removed\n        self.catalog.shallow_copy()\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_shallow_copy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "8c87318558f2b8a1751b0d832b078dd87be500f107c17143a96b43779adf6080",
        "warmup_time": -1
    },
    "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_values": {
        "code": "class TimeKedroDataCatalog:\n    def time_values(self):\n        \"\"\"Benchmark the time to get the items of the catalog\"\"\"\n        self.catalog.values()\n\n    def setup(self):\n        self.catalog = KedroDataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.feed_dict = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_kedrodatacatalog.TimeKedroDataCatalog.time_values",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "f9ae9754ee8624778e9d2db2bcfc7992a9ecbc9cbf05861b785db0ee0075a79e",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoader.time_loading_catalog": {
        "code": "class TimeOmegaConfigLoader:\n    def time_loading_catalog(self):\n        \"\"\"Benchmark the time to load the catalog\"\"\"\n        self.loader[\"catalog\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params)\n        _create_config_file(self.conf_source, \"local\", \"parameters.yml\", local_params)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n        _create_config_file(self.conf_source, \"local\", \"globals.yml\", local_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoader.time_loading_catalog",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "3ccff2348faeaf3038548994686b45deeaa3c7c46df2270a8a1f697e7401ae5a",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoader.time_loading_globals": {
        "code": "class TimeOmegaConfigLoader:\n    def time_loading_globals(self):\n        \"\"\"Benchmark the time to load global configuration\"\"\"\n        self.loader[\"globals\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params)\n        _create_config_file(self.conf_source, \"local\", \"parameters.yml\", local_params)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n        _create_config_file(self.conf_source, \"local\", \"globals.yml\", local_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoader.time_loading_globals",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d42dda2b001097642dc790de01ab15e3f1f11426f6bfc5affbc1c658248f32be",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoader.time_loading_parameters": {
        "code": "class TimeOmegaConfigLoader:\n    def time_loading_parameters(self):\n        \"\"\"Benchmark the time to load the parameters\"\"\"\n        self.loader[\"parameters\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params)\n        _create_config_file(self.conf_source, \"local\", \"parameters.yml\", local_params)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n        _create_config_file(self.conf_source, \"local\", \"globals.yml\", local_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoader.time_loading_parameters",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "3187d47ad3445bdf83439512e124e3cde01f0503a3ffa7db9ca7a02e6bc2f7f2",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoader.time_loading_parameters_runtime": {
        "code": "class TimeOmegaConfigLoader:\n    def time_loading_parameters_runtime(self):\n        \"\"\"Benchmark the time to load parameters with runtime configuration\"\"\"\n        self.loader.runtime_params = _generate_params(2001, 2002)\n        self.loader[\"parameters\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params)\n        _create_config_file(self.conf_source, \"local\", \"parameters.yml\", local_params)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n        _create_config_file(self.conf_source, \"local\", \"globals.yml\", local_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoader.time_loading_parameters_runtime",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "153be6afe75261c83d15bbc165c10b98af15d3489c722c0f7f8e5c0ce3ca2d59",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoader.time_merge_soft_strategy": {
        "code": "class TimeOmegaConfigLoader:\n    def time_merge_soft_strategy(self):\n        \"\"\"Benchmark the time to load and soft-merge configurations\"\"\"\n        self.loader.merge_strategy = {\"catalog\": \"soft\"}\n        self.loader[\"catalog\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params)\n        _create_config_file(self.conf_source, \"local\", \"parameters.yml\", local_params)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n        _create_config_file(self.conf_source, \"local\", \"globals.yml\", local_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoader.time_merge_soft_strategy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "317897f43311426ea9b688e3019361eb5bb1f61f60eca4f763d7a8ec38265ea2",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoaderAdvanced.time_loading_catalog": {
        "code": "class TimeOmegaConfigLoaderAdvanced:\n    def time_loading_catalog(self):\n        \"\"\"Benchmark the time to load the catalog\"\"\"\n        self.loader[\"catalog\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog_with_interpolations)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog_with_interpolations)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params_with_globals)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoaderAdvanced.time_loading_catalog",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "5499c39a6750c5d527f1a3e8a747fdd5b3128af31640d9d7ee9c72be261e344a",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoaderAdvanced.time_loading_parameters": {
        "code": "class TimeOmegaConfigLoaderAdvanced:\n    def time_loading_parameters(self):\n        \"\"\"Benchmark the time to load parameters with global interpolation\"\"\"\n        self.loader[\"parameters\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog_with_interpolations)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog_with_interpolations)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params_with_globals)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoaderAdvanced.time_loading_parameters",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "f74ef4eead7a35df856006dbf9e1b72b61ba36b34767525f55bf8c5eabb343f1",
        "warmup_time": -1
    },
    "benchmark_runner.RunnerMemorySuite.mem_runners": {
        "code": "class RunnerMemorySuite:\n    def mem_runners(self, runner):\n        catalog = create_data_catalog()\n        test_pipeline = create_compute_bound_pipeline()\n        runner_module = importlib.import_module(\"kedro.runner\")\n        runner_obj = getattr(runner_module, runner)()\n        runner_obj.run(test_pipeline, catalog=catalog)\n\n    def setup(self, *args, **kwargs):\n        data_dir = Path(\"benchmarks/data\")\n        data_dir.mkdir(exist_ok=True, parents=True)\n    \n        # Create a dummy csv\n        with open(data_dir / \"data.csv\", \"w\") as f:\n            f.write(\"col1,col2\\n1,2\\n\")",
        "name": "benchmark_runner.RunnerMemorySuite.mem_runners",
        "param_names": [
            "runner"
        ],
        "params": [
            [
                "'SequentialRunner'",
                "'ThreadRunner'",
                "'ParallelRunner'"
            ]
        ],
        "type": "memory",
        "unit": "bytes",
        "version": "b8a260ba8d9fd8d0c6412b02e3e94fbf5d97375ed30bf8e321a7a22965d96c93"
    },
    "benchmark_runner.RunnerMemorySuite.peakmem_runners": {
        "code": "class RunnerMemorySuite:\n    def peakmem_runners(self, runner):\n        catalog = create_data_catalog()\n        test_pipeline = create_compute_bound_pipeline()\n        runner_module = importlib.import_module(\"kedro.runner\")\n        runner_obj = getattr(runner_module, runner)()\n        runner_obj.run(test_pipeline, catalog=catalog)\n\n    def setup(self, *args, **kwargs):\n        data_dir = Path(\"benchmarks/data\")\n        data_dir.mkdir(exist_ok=True, parents=True)\n    \n        # Create a dummy csv\n        with open(data_dir / \"data.csv\", \"w\") as f:\n            f.write(\"col1,col2\\n1,2\\n\")",
        "name": "benchmark_runner.RunnerMemorySuite.peakmem_runners",
        "param_names": [
            "runner"
        ],
        "params": [
            [
                "'SequentialRunner'",
                "'ThreadRunner'",
                "'ParallelRunner'"
            ]
        ],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "6e5022d163f95411941b4a002d63e05981b7cc0371a1a2f510b2c5c575b90e61"
    },
    "benchmark_runner.RunnerTimeSuite.time_compute_bound_runner": {
        "code": "class RunnerTimeSuite:\n    def time_compute_bound_runner(self, runner):\n        catalog = create_data_catalog()\n        test_pipeline = create_compute_bound_pipeline()\n        runner_module = importlib.import_module(\"kedro.runner\")\n        runner_obj = getattr(runner_module, runner)()\n        runner_obj.run(test_pipeline, catalog=catalog)\n\n    def setup(self, *args, **kwargs):\n        data_dir = Path(\"benchmarks/data\")\n        data_dir.mkdir(exist_ok=True, parents=True)\n    \n        # Create a dummy csv\n        with open(data_dir / \"data.csv\", \"w\") as f:\n            f.write(\"col1,col2\\n1,2\\n\")",
        "min_run_count": 2,
        "name": "benchmark_runner.RunnerTimeSuite.time_compute_bound_runner",
        "number": 0,
        "param_names": [
            "runner"
        ],
        "params": [
            [
                "'SequentialRunner'",
                "'ThreadRunner'",
                "'ParallelRunner'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "44f35ab9f98efeb120d65e97c8d480f9247cad3fbeec587177c837e368f0c74f",
        "warmup_time": -1
    },
    "benchmark_runner.RunnerTimeSuite.time_io_bound_runner": {
        "code": "class RunnerTimeSuite:\n    def time_io_bound_runner(self, runner):\n        \"\"\"IO bound pipeline\"\"\"\n        catalog = create_data_catalog()\n        test_pipeline = create_io_bound_pipeline()\n        runner_module = importlib.import_module(\"kedro.runner\")\n        runner_obj = getattr(runner_module, runner)()\n        runner_obj.run(test_pipeline, catalog=catalog)\n\n    def setup(self, *args, **kwargs):\n        data_dir = Path(\"benchmarks/data\")\n        data_dir.mkdir(exist_ok=True, parents=True)\n    \n        # Create a dummy csv\n        with open(data_dir / \"data.csv\", \"w\") as f:\n            f.write(\"col1,col2\\n1,2\\n\")",
        "min_run_count": 2,
        "name": "benchmark_runner.RunnerTimeSuite.time_io_bound_runner",
        "number": 0,
        "param_names": [
            "runner"
        ],
        "params": [
            [
                "'SequentialRunner'",
                "'ThreadRunner'",
                "'ParallelRunner'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "15f3572099bf2406446242545a305b4d100db1b1ad54d1fdd57ff5fed7ad6e6f",
        "warmup_time": -1
    },
    "version": 2
}