{
    "benchmark_datacatalog.TimeDataCatalog.time_contains": {
        "code": "class TimeDataCatalog:\n    def time_contains(self):\n        \"\"\"Benchmark the time to check if a dataset exists\"\"\"\n        for i in range(1,1001):\n            f\"dataset_{i}\" in self.catalog\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.parameters = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_contains",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "4e3a91a7c35589e8c62f3f8e5fd1d2651113c6da5ad2c866d7c8f14172979c53",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_exists": {
        "code": "class TimeDataCatalog:\n    def time_exists(self):\n        \"\"\"Benchmark the time to check if datasets exist\"\"\"\n        for i in range(1,1001):\n            self.catalog.exists(f\"dataset_{i}\")\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.parameters = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_exists",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "cc04d61ac7d1fd11981c17220deae43ceb4e44acce906bd4e649fa90a80580df",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_get": {
        "code": "class TimeDataCatalog:\n    def time_get(self):\n        \"\"\"Benchmark the time to get a dataset\"\"\"\n        for i in range(1,1001):\n            self.catalog.get(f\"dataset_{i}\")\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.parameters = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_get",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "dbab78585759d091fac7ecc0f240ca6aa22c82341c5ba6063959ef7d08cc8d78",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_getitem": {
        "code": "class TimeDataCatalog:\n    def time_getitem(self):\n        \"\"\"Benchmark the time to get a dataset\"\"\"\n        for i in range(1,1001):\n            self.catalog[f\"dataset_{i}\"]\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.parameters = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_getitem",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "f0977d3433490a5d1e8deac062c8e855bac6838784e922428f91bc99f28e453c",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_init": {
        "code": "class TimeDataCatalog:\n    def time_init(self):\n        \"\"\"Benchmark the time to initialize the catalog\"\"\"\n        DataCatalog.from_config(base_catalog)\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.parameters = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_init",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "cf8f82e6aa228448a9c07efa61fee301874194b9c173e1558dc1a1010c7311f0",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_items": {
        "code": "class TimeDataCatalog:\n    def time_items(self):\n        \"\"\"Benchmark the time to get the items of the catalog\"\"\"\n        self.catalog.items()\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.parameters = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_items",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "0b4179d0bb6d68f2f5b91240e6ffaeab593544b4d1f3efac001095ea96b1a4cd",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_iter": {
        "code": "class TimeDataCatalog:\n    def time_iter(self):\n        \"\"\"Benchmark the time to iterate over the catalog\"\"\"\n        for dataset in self.catalog:\n            pass\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.parameters = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_iter",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "c28ca7960d8e32b8a66aab57f03981391d7e5831ed8ad3f925530f50e3460359",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_keys": {
        "code": "class TimeDataCatalog:\n    def time_keys(self):\n        \"\"\"Benchmark the time to get the keys of the catalog\"\"\"\n        self.catalog.keys()\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.parameters = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_keys",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "b507a0d5d5365db911b01c1ff06f7ef4e2682b0ee0394a64245b2f229e7c663e",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_load": {
        "code": "class TimeDataCatalog:\n    def time_load(self):\n        \"\"\"Benchmark the time to load datasets\"\"\"\n        for i in range(1,1001):\n            self.catalog.load(f\"dataset_load_{i}\")\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.parameters = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_load",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "1896f1b871f31f2f8e4256ca635e8d88248e2cb5e616cf748621ceb36d4cdca2",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_release": {
        "code": "class TimeDataCatalog:\n    def time_release(self):\n        \"\"\"Benchmark the time to release datasets\"\"\"\n        for i in range(1,1001):\n            self.catalog.release(f\"dataset_{i}\")\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.parameters = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_release",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "da1878a7be3473b595650ff9091db9c625bda6541b5f6fc37f003322e874a609",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_resolve_factory": {
        "code": "class TimeDataCatalog:\n    def time_resolve_factory(self):\n        \"\"\"Benchmark the time to resolve factory\"\"\"\n        for i in range(1,1001):\n            self.catalog.get(f\"dataset_factory_{i}\")\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.parameters = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_resolve_factory",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "81f037275034f33bdda52580d02b49ca45e6a622922865e4be58bde7f7277898",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_save": {
        "code": "class TimeDataCatalog:\n    def time_save(self):\n        \"\"\"Benchmark the time to save datasets\"\"\"\n        for i in range(1,1001):\n            self.catalog.save(f\"dataset_{i}\", self.dataframe)\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.parameters = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_save",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "81a2aa66312f2220d201215f2555119dd179689602b4253ed51f9032dec14866",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_setitem": {
        "code": "class TimeDataCatalog:\n    def time_setitem(self):\n        \"\"\"Benchmark the time to set a dataset\"\"\"\n        for i in range(1,1001):\n            self.catalog[f\"dataset_new_{i}\"] = CSVDataset(filepath=\"data.csv\")\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.parameters = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_setitem",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "a5871ba83aea593b53dc142d80cf7d61c055381934377a7e46720ee7aa49abbc",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_setitem_raw": {
        "code": "class TimeDataCatalog:\n    def time_setitem_raw(self):\n        \"\"\"Benchmark the time to add a memory dataset\"\"\"\n        for i in range(1,1001):\n            self.catalog[f\"param_{i}\"] = self.parameters[f\"param_{i}\"]\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.parameters = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_setitem_raw",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "470e29181893dc80953a9c761c118013e7560030cfab211a045bb19876aa800c",
        "warmup_time": -1
    },
    "benchmark_datacatalog.TimeDataCatalog.time_values": {
        "code": "class TimeDataCatalog:\n    def time_values(self):\n        \"\"\"Benchmark the time to get the items of the catalog\"\"\"\n        self.catalog.values()\n\n    def setup(self):\n        self.catalog = DataCatalog.from_config(base_catalog)\n        self.dataframe = pd.DataFrame({\"column\": [1, 2, 3]})\n        self.dataframe.to_csv(\"data.csv\", index=False)\n        self.datasets = {\n            f\"dataset_new_{i}\": CSVDataset(filepath=\"data.csv\") for i in range(1, 1001)\n        }\n        self.parameters = {\n            f\"param_{i}\": i for i in range(1, 1001)\n        }",
        "min_run_count": 2,
        "name": "benchmark_datacatalog.TimeDataCatalog.time_values",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "f1a2d6c2a7bb0023dad9d2c3236912815e0b0fa7bb21a1e39c9116434dcb6f2e",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoader.time_loading_catalog": {
        "code": "class TimeOmegaConfigLoader:\n    def time_loading_catalog(self):\n        \"\"\"Benchmark the time to load the catalog\"\"\"\n        self.loader[\"catalog\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params)\n        _create_config_file(self.conf_source, \"local\", \"parameters.yml\", local_params)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n        _create_config_file(self.conf_source, \"local\", \"globals.yml\", local_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoader.time_loading_catalog",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "3ccff2348faeaf3038548994686b45deeaa3c7c46df2270a8a1f697e7401ae5a",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoader.time_loading_globals": {
        "code": "class TimeOmegaConfigLoader:\n    def time_loading_globals(self):\n        \"\"\"Benchmark the time to load global configuration\"\"\"\n        self.loader[\"globals\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params)\n        _create_config_file(self.conf_source, \"local\", \"parameters.yml\", local_params)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n        _create_config_file(self.conf_source, \"local\", \"globals.yml\", local_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoader.time_loading_globals",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d42dda2b001097642dc790de01ab15e3f1f11426f6bfc5affbc1c658248f32be",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoader.time_loading_parameters": {
        "code": "class TimeOmegaConfigLoader:\n    def time_loading_parameters(self):\n        \"\"\"Benchmark the time to load the parameters\"\"\"\n        self.loader[\"parameters\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params)\n        _create_config_file(self.conf_source, \"local\", \"parameters.yml\", local_params)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n        _create_config_file(self.conf_source, \"local\", \"globals.yml\", local_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoader.time_loading_parameters",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "3187d47ad3445bdf83439512e124e3cde01f0503a3ffa7db9ca7a02e6bc2f7f2",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoader.time_loading_parameters_runtime": {
        "code": "class TimeOmegaConfigLoader:\n    def time_loading_parameters_runtime(self):\n        \"\"\"Benchmark the time to load parameters with runtime configuration\"\"\"\n        self.loader.runtime_params = _generate_params(2001, 2002)\n        self.loader[\"parameters\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params)\n        _create_config_file(self.conf_source, \"local\", \"parameters.yml\", local_params)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n        _create_config_file(self.conf_source, \"local\", \"globals.yml\", local_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoader.time_loading_parameters_runtime",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "153be6afe75261c83d15bbc165c10b98af15d3489c722c0f7f8e5c0ce3ca2d59",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoader.time_merge_soft_strategy": {
        "code": "class TimeOmegaConfigLoader:\n    def time_merge_soft_strategy(self):\n        \"\"\"Benchmark the time to load and soft-merge configurations\"\"\"\n        self.loader.merge_strategy = {\"catalog\": \"soft\"}\n        self.loader[\"catalog\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params)\n        _create_config_file(self.conf_source, \"local\", \"parameters.yml\", local_params)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n        _create_config_file(self.conf_source, \"local\", \"globals.yml\", local_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoader.time_merge_soft_strategy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "317897f43311426ea9b688e3019361eb5bb1f61f60eca4f763d7a8ec38265ea2",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoaderAdvanced.time_loading_catalog": {
        "code": "class TimeOmegaConfigLoaderAdvanced:\n    def time_loading_catalog(self):\n        \"\"\"Benchmark the time to load the catalog\"\"\"\n        self.loader[\"catalog\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog_with_interpolations)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog_with_interpolations)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params_with_globals)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoaderAdvanced.time_loading_catalog",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "5499c39a6750c5d527f1a3e8a747fdd5b3128af31640d9d7ee9c72be261e344a",
        "warmup_time": -1
    },
    "benchmark_ocl.TimeOmegaConfigLoaderAdvanced.time_loading_parameters": {
        "code": "class TimeOmegaConfigLoaderAdvanced:\n    def time_loading_parameters(self):\n        \"\"\"Benchmark the time to load parameters with global interpolation\"\"\"\n        self.loader[\"parameters\"]\n\n    def setup(self):\n        # Setup temporary configuration directory with sample config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n    \n        # Create sample config files in the temp directory\n        _create_config_file(self.conf_source, \"base\", \"catalog.yml\", base_catalog_with_interpolations)\n        _create_config_file(self.conf_source, \"local\", \"catalog.yml\", local_catalog_with_interpolations)\n        _create_config_file(self.conf_source, \"base\", \"parameters.yml\", base_params_with_globals)\n        _create_config_file(self.conf_source, \"base\", \"globals.yml\", base_globals)\n    \n        # Instantiate the OmegaConfigLoader\n        self.loader = OmegaConfigLoader(conf_source=self.conf_source, base_env='base', default_run_env='local')",
        "min_run_count": 2,
        "name": "benchmark_ocl.TimeOmegaConfigLoaderAdvanced.time_loading_parameters",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "f74ef4eead7a35df856006dbf9e1b72b61ba36b34767525f55bf8c5eabb343f1",
        "warmup_time": -1
    },
    "benchmark_runner.RunnerMemorySuite.mem_runners": {
        "code": "class RunnerMemorySuite:\n    def mem_runners(self, runner):\n        catalog = _get_catalog(runner)\n        test_pipeline = create_compute_bound_pipeline()\n        runner_module = importlib.import_module(\"kedro.runner\")\n        runner_obj = getattr(runner_module, runner)()\n        runner_obj.run(test_pipeline, catalog=catalog)\n\n    def setup(self, *args, **kwargs):\n        data_dir = Path(\"benchmarks/data\")\n        data_dir.mkdir(exist_ok=True, parents=True)\n    \n        # Create a dummy csv\n        with open(data_dir / \"data.csv\", \"w\") as f:\n            f.write(\"col1,col2\\n1,2\\n\")",
        "name": "benchmark_runner.RunnerMemorySuite.mem_runners",
        "param_names": [
            "runner"
        ],
        "params": [
            [
                "'SequentialRunner'",
                "'ThreadRunner'",
                "'ParallelRunner'"
            ]
        ],
        "type": "memory",
        "unit": "bytes",
        "version": "f191d358b753ae48d94151d1f06753c3b2310ecea6ceb86483525c1c5d567f85"
    },
    "benchmark_runner.RunnerMemorySuite.peakmem_runners": {
        "code": "class RunnerMemorySuite:\n    def peakmem_runners(self, runner):\n        catalog = _get_catalog(runner)\n        test_pipeline = create_compute_bound_pipeline()\n        runner_module = importlib.import_module(\"kedro.runner\")\n        runner_obj = getattr(runner_module, runner)()\n        runner_obj.run(test_pipeline, catalog=catalog)\n\n    def setup(self, *args, **kwargs):\n        data_dir = Path(\"benchmarks/data\")\n        data_dir.mkdir(exist_ok=True, parents=True)\n    \n        # Create a dummy csv\n        with open(data_dir / \"data.csv\", \"w\") as f:\n            f.write(\"col1,col2\\n1,2\\n\")",
        "name": "benchmark_runner.RunnerMemorySuite.peakmem_runners",
        "param_names": [
            "runner"
        ],
        "params": [
            [
                "'SequentialRunner'",
                "'ThreadRunner'",
                "'ParallelRunner'"
            ]
        ],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "afc5a9dee40df018f3af8c8a4c0c267246143f7fd5e36297de3bc85917c31472"
    },
    "benchmark_runner.RunnerTimeSuite.time_compute_bound_runner": {
        "code": "class RunnerTimeSuite:\n    def time_compute_bound_runner(self, runner):\n        catalog = _get_catalog(runner)\n        test_pipeline = create_compute_bound_pipeline()\n        runner_module = importlib.import_module(\"kedro.runner\")\n        runner_obj = getattr(runner_module, runner)()\n        runner_obj.run(test_pipeline, catalog=catalog)\n\n    def setup(self, *args, **kwargs):\n        data_dir = Path(\"benchmarks/data\")\n        data_dir.mkdir(exist_ok=True, parents=True)\n    \n        # Create a dummy csv\n        with open(data_dir / \"data.csv\", \"w\") as f:\n            f.write(\"col1,col2\\n1,2\\n\")",
        "min_run_count": 2,
        "name": "benchmark_runner.RunnerTimeSuite.time_compute_bound_runner",
        "number": 0,
        "param_names": [
            "runner"
        ],
        "params": [
            [
                "'SequentialRunner'",
                "'ThreadRunner'",
                "'ParallelRunner'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e2e11c8223a1c952f1d8b9122f6f294d75b35b9aea447efc84ab4daf413bde1d",
        "warmup_time": -1
    },
    "benchmark_runner.RunnerTimeSuite.time_io_bound_runner": {
        "code": "class RunnerTimeSuite:\n    def time_io_bound_runner(self, runner):\n        \"\"\"IO bound pipeline\"\"\"\n        catalog = _get_catalog(runner)\n        test_pipeline = create_io_bound_pipeline()\n        runner_module = importlib.import_module(\"kedro.runner\")\n        runner_obj = getattr(runner_module, runner)()\n        runner_obj.run(test_pipeline, catalog=catalog)\n\n    def setup(self, *args, **kwargs):\n        data_dir = Path(\"benchmarks/data\")\n        data_dir.mkdir(exist_ok=True, parents=True)\n    \n        # Create a dummy csv\n        with open(data_dir / \"data.csv\", \"w\") as f:\n            f.write(\"col1,col2\\n1,2\\n\")",
        "min_run_count": 2,
        "name": "benchmark_runner.RunnerTimeSuite.time_io_bound_runner",
        "number": 0,
        "param_names": [
            "runner"
        ],
        "params": [
            [
                "'SequentialRunner'",
                "'ThreadRunner'",
                "'ParallelRunner'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "1a666ba0fcae22a0f83ae26659e6a7e6c56948697b11300cf7124700d2a32c2e",
        "warmup_time": -1
    },
    "version": 2
}